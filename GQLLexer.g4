lexer grammar GQLLexer;

SPACE: [ \t\r\n]+ -> channel(HIDDEN);

SEMI: ';';
AT: 'AT';
SCHEMA: 'SCHEMA';
SOLIDUS: '/';
DOLLAR: '$';
BACKQUOTE: '`';
ID_START:
	[\p{L}\p{Nl}\p{Other_ID_Start}-\p{Pattern_Syntax}-\p{Pattern_White_Space}];
ID_CONTINUE:
	[\p{ID_Start}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Other_ID_Continue}-\p{Pattern_Syntax}-\p{Pattern_White_Space}]
		;
AS: A S;
EQ: '=';
COLON: ':';
IDENTIFIER: ID_START ID_CONTINUE*;
DELIMITED_IDENTIFIER:
	BACKQUOTE ('\\' . | '``' | ~('`' | '\\'))* BACKQUOTE;
OTHERWISE: O T H E R W I S E;
UNION: U N I O N;
EXCEPT: E X C E P T;
INTERSECT: I N T E R S E C T;
MAX: M A X;
DISTINCT: D I S T I N C T;
ALL: A L L;
FROM: F R O M;
COPY: C O P Y;
OF: O F;
PROPERTY: P R O P E R T Y;
GRAPH: G R A P H;
THEN: T H E N;
HOME_SCHEMA: H O M E '_' S C H E M A;
CURRENT_SCHEMA: C U R R E N T '_' S C H E M A;
EMPTY: E M P T Y;
HOME: H O M E;
EMPTY_PROPERTY_GRAPH: EMPTY '_' PROPERTY '_' GRAPH;
EMPTY_GRAPH: EMPTY '_' GRAPH;
HOME_PROPERTY_GRAPH: HOME '_' PROPERTY '_' GRAPH;
HOME_GRAPH: HOME '_' GRAPH;
CURRENT: C U R R E N T;
CURRENT_PROPERTY_GRAPH: CURRENT '_' PROPERTY '_' GRAPH;
CURRENT_GRAPH: CURRENT '_' GRAPH;
LABEL: L A B E L;
LABELS: L A B E L S;
LIKE: L I K E;
TYPE: T Y P E;
IS: I S;
NODE: N O D E;
VERTEX: V E R T E X;
DIRECTED: D I R E C T E D;
UNDIRECTED: U N D I R E C T E D;
EDGE: E D G E;
RELATIONSHIP: R E L A T I O N S H I P;
CONNECTING: C O N N E C T I N G;
TO: T O;
CATALOG: C A T A L O G;
PROCEDURE: P R O C E D U R E;
SINGLE: S I N G L E;
MULTI: M U L T I;
MULTIPLE: M U L T I P L E;
BINDING: B I N D I N G;
TABLE: T A B L E;
UNIT: U N I T;
RECORD: R E C O R D;
ANY: A N Y;
NOTHING: N O T H I N G;
BOOLEAN: B O O L E A N;
CHARACTER: C H A R A C T E R;
STRING: S T R I N G;
BINARY: B I N A R Y;
INTEGER: I N T E G E R;
INTEGER32: INTEGER '32';
INTEGER64: INTEGER64 '64';
DECIMAL: D E C I M A L;
UNDERSCORE: '_';
EMPTY_BINDING_TABLE: EMPTY '_' BINDING '_' TABLE;
EMPTY_TABLE: EMPTY '_' TABLE;
UNIT_BINDING_TABLE: UNIT '_' BINDING '_' TABLE;
UNIT_TABLE: UNIT '_' TABLE;
FLOAT: F L O A T;
FLOAT32: FLOAT '32';
FLOAT64: FLOAT64;
FLOAT128: FLOAT128;
DATETIME: D A T E T I M E;
PATH: P A T H;
LOCALDATETIME: L O C A L D A T E T I M E;
DATE: D A T E;
TIME: T I M E;
LOCALTIME: L O C A L T I M E;
DURATION: D U R A T I O N;
LIST: L I S T;
ARRAY: A R R A Y;
MULTISET: M U L T I S E T;
SET: S E T;
ORDERED: O R D E R E D;
MAP: M A P;
VALUE: V A L U E;
OPTIONAL: O P T I O N A L;
OR: O R;
XOR: X O R;
AND: A N D;
NOT: N O T;
TRUE: T R U E;
NULLIF: N U L L I F;
COALESCE: C O A L E S C E;
CASE: C A S E;
ELSE: E L S E;
SHORTEST: S H O R T E S T;
PATHS: P A T H S;
WALK: W A L K;
TRAIL: T R A I L;
SIMPLE: S I M P L E;
KEEP: K E E P;
YIELD: Y I E L D;
OUT_DEGREE: 'outDegree';
IN_DEGREE: 'inDegree';
CEIL: 'CEIL';
CEILING: 'CEILING';
FLOOR: 'FLOOR';
SQRT: 'SQRT';
POWER: 'POWER';
EXP: 'EXP';
LN: 'LN';
LOG10: 'LOG10';
LOG: 'LOG';
MOD: 'MOD';
ABS: 'ABS';
LENGTH: 'LENGTH';
OCTET_LENGTH: 'OCTET_LENGTH';
CHARACTER_LENGTH: 'CHARACTER_LENGTH';
R_TRIM: 'rtrim';
L_TRIM: 'ltrim';
TRIM: 'trim';
SIN: 'SIN';
RIGHT: 'right';
LEFT: 'left';
SUBSTRING: 'substring';
NFC: 'nfc';
NFD: 'nfd';
NFKC: 'nfkc';
NFKD: 'nfkd';
NORMALIZE: 'normalize';
LEADING: 'leading';
TRAILING: 'trailing';
BOTH: 'both';
UPPER: 'upper';
TO_UPPER: 'toUpper';
LOWER: 'lower';
TO_LOWER: 'toLower';
TAIL: 'tail';
CURRENT_TIME: CURRENT '_' TIME;
CURRENT_DATE: CURRENT '_' DATE;
FUNCTION: F U N C T I O N;
ASC: A S C;
DESC: D E S C;
LIMIT: L I M I T;
OFFSET: O F F S E T;
WITH: W I T H;
INDEX: I N D E X;
ORDER: O R D E R;
CALL: C A L L;
IN: I N;
LET: L E T;
FOR: F O R;
AGGREGATE: A G G R E G A T E;
FILTER: F I L T E R;
MANDATORY: M A N D A T O R Y;
MATCH: M A T C H;
GRAPHS: G R A P H S;
ORDINALITY: O R D I N A L I T Y;
PROJECT: P R O J E C T;
RETURN: R E T U R N;
SELECT: S E L E C T;
IF: I F;
DO: D O;
MERGE: M E R G E;
REMOVE: R E M O V E;
DETACH: D E T A C H;
DELETE: D E L E T E;
USE: U S E;
DROP: D R O P;
INSERT: I N S E R T;
CONSTANT: C O N S T A N T;
REPLACE: R E P L A C E;
CREATE: C R E A T E;
HAVING: H A V I N G;
GROUP: G R O U P;
BY: B Y;
PATTERN: P A T T E R N;
QUERY: Q U E R Y;
LOCALTIMESTAMP: 'LOCALTIMESTAMP';
CURRENT_TIMESTAMP: CURRENT '_' TIMESTAMP;
NORMALIZED: 'normalized';
COS: 'COS';
TAN: 'TAN';
COT: 'COT';
SINH: 'SINH';
COSH: 'COSH';
TANH: 'TANH';
ASIN: 'ASIN';
ACOS: 'ACOS';
ATAN: 'ATAN';
DEGREES: 'DEGREES';
RADIANS: 'RADIANS';
COST: C O S T;
EXISTS: E X I S T S;
DEFAULT: D E F A U L T;
WHERE: W H E R E;
PROFILE: P R O F I L E;
EXPLAIN: E X P L A I N;
SESSION: S E S S I O N;
ZONE: Z O N E ;
PARAMETER: P A R A M E T E R;
MUTABLE: M U T A B L E;
FINAL: F I N A L;
CLEAR: C L E A R;
CLOSE: C L O S E;
START: S T A R T;
TRANSACTION: T R A N S A C T I O N;
READ: R E A D;
ONLY: O N L Y;
WRITE: W R I T E;
ROLLBACK:R O L L B A C K;
COMMIT: C O M M I T;
ACYCLIC: A C Y C L I C;
END: E N D;
WHEN: W H E N;
LT: L_ANGLE_BRACKET;
GT: R_ANGLE_BRACKET;
LE: '<=';
GE: '>=';
FALSE: F A L S E;
UNKNOWN: U N K N O W N;
COUNT: C O U N T;
NULL: N U L L;
ROLE: R O L E;
AVG: A V G;
SUM: S U M;
MIN: M I N;
PRODUCT: P R O D U C T;
COLLECT: C O L L E C T;
ST_Dev: 'stDev';
ST_Dev_P: 'stDevP';
USER: U S E R;
TIMESTAMP: T I M E S T A M P;
CURRENT_ROLE: CURRENT '_' ROLE;
CURRENT_USER: CURRENT '_' USER;
GROUPS: G R O U P S;
NEQ: '<>';
L_BRACE: '{';
R_BRACE: '}';
L_PAREN: '(';
R_PAREN: ')';
L_BRACKET: '[';
R_BRACKET: ']';
L_ANGLE_BRACKET: '<';
R_ANGLE_BRACKET: '>';
MINUS: '-';
PERIOD: '.';
PERCENT: '%';
DOUBLE_PERIOD: '..';
VERTICAL_BAR: '|';
AMPERSAND: '&';
EXCLAMATION_MARK: '!';
UNSIGNED_DECIMAL_INTEGER: DIGIT ( UNDERSCORE? DIGIT)*;
UNSIGNED_HEX_INTEGER: '0x' HEX_DIGIT (UNDERSCORE? HEX_DIGIT)*;
UNSIGNED_OCT_INTEGER: '0o' OCT_DIGIT (UNDERSCORE? OCT_DIGIT)*;
UNSIGNED_BIN_INTEGER: '0b' BIN_DIGIT (UNDERSCORE? BIN_DIGIT)*;
STRING_LITERAL:
	QUOTE_STRING_LITERAL
	| DOUBLE_QUOTE_STRING_LITERAL;
DOUBLE_QUOTE_STRING_LITERAL:
	'"' ('\\' . | '""' | ~('"' | '\\'))* '"';
QUOTE_STRING_LITERAL:
	'\'' ('\\' . | '\'\'' | ~('\'' | '\\'))* '\'';
fragment HEX_DIGIT: [0-9a-fA-F];
fragment OCT_DIGIT: [0-7];
fragment BIN_DIGIT: [01];
fragment DIGIT: [0-9];
fragment A: [aA];
fragment B: [bB];
fragment C: [cC];
fragment D: [dD];
fragment E: [eE];
fragment F: [fF];
fragment G: [gG];
fragment H: [hH];
fragment I: [iI];
fragment J: [jJ];
fragment K: [kK];
fragment L: [lL];
fragment M: [mM];
fragment N: [nN];
fragment O: [oO];
fragment P: [pP];
fragment Q: [qQ];
fragment R: [rR];
fragment S: [sS];
fragment T: [tT];
fragment U: [uU];
fragment V: [vV];
fragment W: [wW];
fragment X: [xX];
fragment Y: [yY];
fragment Z: [zZ];